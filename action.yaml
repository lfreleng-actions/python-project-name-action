---
# SPDX-License-Identifier: Apache-2.0
# SPDX-FileCopyrightText: 2025 The Linux Foundation

# python-project-name-action
name: "🐍 Python Project/Package Names"
description: "Extracts Python project name and derives the package name"

inputs:
  # Optional
  PATH_PREFIX:
    description: "Directory location containing project code"
    type: string
    required: false

outputs:
  # Mandatory
  PYTHON_PROJECT_FILE:
    # Supports both pyproject.toml and setup.py
    description: "File used to extract/parse project metadata"
    value: ${{ steps.capture.outputs.python_project_file }}
  PYTHON_PROJECT_NAME:
    description: "Name of the Python project from pyproject.toml/setup.py"
    value: ${{ steps.capture.outputs.python_project_name }}
  PYTHON_PACKAGE_NAME:
    # Note: dashes in the name are substituted with underscores
    description: "The name of the Python package"
    value: ${{ steps.capture.outputs.python_package_name }}

runs:
  using: "composite"
  steps:
    - name: "Setup action/environment"
      shell: bash
      run: |
        # Setup action/environment

        # Handle path_prefix input consistently and when absent
        path_prefix="${{ inputs.PATH_PREFIX }}"
        if [ -z "$path_prefix" ]; then
          # Set current directory as path prefix
          path_prefix="."
        else
          # Strip any trailing slash in provided path
          path_prefix="${path_prefix%/}"
        fi
        # Verify is a valid directory path
        if [ ! -d "$path_prefix" ]; then
          echo "Error: invalid path/prefix to project directory ❌"; exit 1
        fi
        echo "path_prefix=$path_prefix" >> "$GITHUB_ENV"

    # yamllint disable-line rule:line-length
    - uses: lfreleng-actions/path-check-action@ef6cb64d8851552e1290d7e535d00380ce1f5112 # v0.1.2
      id: setup-py
      with:
        path: "${{ env.path_prefix }}/setup.py"

    - name: "Get project name from setup.py"
      id: setup-name
      if: steps.setup-py.outputs.type == 'file'
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/file-grep-regex-action@49c05f5d2d7fb736381cac77d0278af36254f462 # v0.1.0
      with:
        flags: "-oP -m1"
        regex: '(?<=name=")([^"]*)'
        path: "${{ env.path_prefix }}/setup.py"

    # yamllint disable-line rule:line-length
    - uses: lfreleng-actions/path-check-action@ef6cb64d8851552e1290d7e535d00380ce1f5112 # v0.1.2
      id: pyproject-toml
      with:
        path: "${{ env.path_prefix }}/pyproject.toml"

    - name: "Get project name from pyproject.toml"
      id: pyproject-name
      if: steps.pyproject-toml.outputs.type == 'file'
      # yamllint disable-line rule:line-length
      uses: lfreleng-actions/file-grep-regex-action@49c05f5d2d7fb736381cac77d0278af36254f462 # v0.1.0
      with:
        flags: "-oP -m1"
        regex: '(?<=^name = ")([^"]*)'
        filename: "${{ env.path_prefix }}/pyproject.toml"

    - name: "Capture Python project metadata"
      if: env.python_project != 'false'
      id: capture
      shell: bash
      # yamllint disable rule:line-length
      run: |
        # Capture Python project metadata

        # pyproject.toml is preferred source if both files exist
        if [ ${{ steps.pyproject-toml.outputs.type }} = 'file' ]; then
          PYTHON_PROJECT_NAME="${{ steps.pyproject-name.outputs.extracted_string}}"
          PYTHON_PROJECT_FILE="pyproject.toml"
          echo "Using project name from: pyproject.toml ✅"

        # Legacy format; does not conform to the latest PEP standards
        elif [ "${{ steps.setup-py.outputs.type }}" = 'file' ]; then
          PYTHON_PROJECT_NAME="${{ steps.setup-name.outputs.extracted_string}}"
          PYTHON_PROJECT_FILE="setup.py"
          echo "Using project name from: setup.py ⚠️"
        fi

        if [ -z "$PYTHON_PROJECT_NAME" ]; then
          echo "Python project name extraction failed ❌"
          exit 1
        fi
        echo "Python project name: $PYTHON_PROJECT_NAME 💬"

        # Replace all dashes in the name with underscores
        PYTHON_PACKAGE_NAME=$(echo "$PYTHON_PROJECT_NAME" | tr '-' '_')
        echo "Python package name: $PYTHON_PACKAGE_NAME"

        # Make available to the GitHub environment
        echo "python_project_name=$PYTHON_PROJECT_NAME" >> "$GITHUB_ENV"
        echo "python_project_name=$PYTHON_PROJECT_NAME" >> "$GITHUB_OUTPUT"
        echo "python_package_name=$PYTHON_PACKAGE_NAME" >> "$GITHUB_ENV"
        echo "python_package_name=$PYTHON_PACKAGE_NAME" >> "$GITHUB_OUTPUT"
        echo "python_project_file=$PYTHON_PROJECT_FILE" >> "$GITHUB_ENV"
        echo "python_project_file=$PYTHON_PROJECT_FILE" >> "$GITHUB_OUTPUT"
